#include <stdio.h>
#include <stdlib.h>

#define ROW 5
#define COL 5
#define MAX 25

enum { HEALTHY = 0, DROUGHT = 1, INSECT = 2, OBSTACLE = 3 };

typedef struct Node {
    int x, y, severity;
    struct Node* next;
} Node;

Node* head = NULL;

typedef struct {
    int x, y, dist;
} QueueNode;

typedef struct {
    QueueNode items[ROW * COL];
    int front, rear;
} Queue;

void initQueue(Queue* q) {
    q->front = q->rear = 0;
}

int isEmpty(Queue* q) {
    return q->front == q->rear;
}

void enqueue(Queue* q, int x, int y, int dist) {
    q->items[q->rear].x = x;
    q->items[q->rear].y = y;
    q->items[q->rear].dist = dist;
    q->rear++;
}

QueueNode dequeue(Queue* q) {
    return q->items[q->front++];
}

void insertLog(int x, int y, int severity) {
    Node* temp = (Node*)malloc(sizeof(Node));
    temp->x = x;
    temp->y = y;
    temp->severity = severity;
    temp->next = head;
    head = temp;
}

int visited[ROW][COL];
int field[ROW][COL];
int threatCount = 0;
int threatList[MAX][3];

void dfs(int x, int y) {
    if (x < 0 || y < 0 || x >= ROW || y >= COL || visited[x][y] || field[x][y] == OBSTACLE) return;
    visited[x][y] = 1;

    if (field[x][y] == DROUGHT || field[x][y] == INSECT) {
        insertLog(x, y, field[x][y]);
        threatList[threatCount][0] = x;
        threatList[threatCount][1] = y;
        threatList[threatCount][2] = field[x][y];
        threatCount++;
    }

    dfs(x + 1, y);
    dfs(x - 1, y);
    dfs(x, y + 1);
    dfs(x, y - 1);
}

int bfs(int startX, int startY, int endX, int endY) {
    int dx[] = {-1, 1, 0, 0};
    int dy[] = {0, 0, -1, 1};
    int vis[ROW][COL] = {0};
    Queue q;
    initQueue(&q);
    enqueue(&q, startX, startY, 0);
    vis[startX][startY] = 1;

    while (!isEmpty(&q)) {
        QueueNode cur = dequeue(&q);
        if (cur.x == endX && cur.y == endY) return cur.dist;

        for (int i = 0; i < 4; i++) {
            int nx = cur.x + dx[i];
            int ny = cur.y + dy[i];
            if (nx >= 0 && ny >= 0 && nx < ROW && ny < COL && !vis[nx][ny] && field[nx][ny] != OBSTACLE) {
                enqueue(&q, nx, ny, cur.dist + 1);
                vis[nx][ny] = 1;
            }
        }
    }
    return -1;
}

void sortThreats() {
    int i, j;
    for (i = 0; i < threatCount - 1; i++) {
        for (j = 0; j < threatCount - i - 1; j++) {
            if (threatList[j][2] < threatList[j+1][2]) {
                int tempX = threatList[j][0];
                int tempY = threatList[j][1];
                int tempS = threatList[j][2];
                threatList[j][0] = threatList[j+1][0];
                threatList[j][1] = threatList[j+1][1];
                threatList[j][2] = threatList[j+1][2];
                threatList[j+1][0] = tempX;
                threatList[j+1][1] = tempY;
                threatList[j+1][2] = tempS;
            }
        }
    }
}

void printField() {
    printf("\n--- Farm Grid ---\n");
    printf("0: Healthy | 1: Drought | 2: Insect | 3: Obstacle\n");
    for (int i = 0; i < ROW; i++) {
        for (int j = 0; j < COL; j++) {
            printf("%d ", field[i][j]);
        }
        printf("\n");
    }
}

void printLogs() {
    Node* temp = head;
    printf("\n--- Inspection Log ---\n");
    if (temp == NULL) {
        printf("No threats detected during inspection.\n");
    } else {
        while (temp != NULL) {
            const char *type = temp->severity == DROUGHT ? "Drought" : "Insect";
            printf("Threat at (%d,%d): %s\n", temp->x, temp->y, type);
            temp = temp->next;
        }
    }
}

void printThreatRanking() {
    printf("\n--- Ranked Threat Zones (Most Critical First) ---\n");
    if (threatCount == 0) {
        printf("No threats detected.\n");
    } else {
        for (int i = 0; i < threatCount; i++) {
            const char *type = threatList[i][2] == DROUGHT ? "Drought" : "Insect";
            printf("%d. Zone (%d,%d): %s\n", i + 1, threatList[i][0], threatList[i][1], type);
        }
    }
}

int main() {
    printf("Enter the 5x5 grid for farm health status:\n");
    printf("Each cell must be one of the following values:\n");
    printf("0 = Healthy, 1 = Drought, 2 = Insect, 3 = Obstacle\n");
    
    for (int i = 0; i < ROW; i++) {
        for (int j = 0; j < COL; j++) {
            scanf("%d", &field[i][j]);
        }
    }

    printField();

    printf("\n--- Starting Inspection ---\n");
    dfs(0, 0);
    printLogs();

    sortThreats();
    printThreatRanking();

    if (threatCount > 0) {
        int dist = bfs(threatList[0][0], threatList[0][1], 0, 0);
        printf("\n--- Navigation Info ---\n");
        if (dist != -1) {
            printf("Shortest path from base (0,0) to most critical zone (%d,%d): %d steps\n",
                   threatList[0][0], threatList[0][1], dist);
        } else {
            printf("No path found to the critical threat zone.\n");
        }
    } else {
        printf("\nNo threats detected!\n");
    }

    return 0;
}
